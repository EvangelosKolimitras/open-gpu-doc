Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------

#define NV_PTIMER                             0x00009FFF:0x00009000 /* RW--D */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0                     0x00009084 /* RW-4R */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_TO                         0:0 /* RWXVF */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_TO_ERROR                   0x1 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_TO_CLEAR                   0x0 /* -W--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_TO_NONE                    0x0 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_WRITE                      1:1 /* RWXVF */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_WRITE_TRUE                 0x1 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_WRITE_FALSE                0x0 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_ADDR                      23:2 /* RWXVF */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_FECS_TGT                 31:31 /* RWXVF */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_FECS_TGT_TRUE              0x1 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_0_FECS_TGT_FALSE             0x0 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_1                     0x00009088 /* RW-4R */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_1_DATA                      31:0 /* RWXVF */
#define NV_PTIMER_PRI_TIMEOUT_SAVE_1_DATA_WAS_READ              0x0 /* RW--V */
#define NV_PTIMER_PRI_TIMEOUT_FECS_ERRCODE               0x0000908C /* RW-4R */
#define NV_PTIMER_PRI_TIMEOUT_FECS_ERRCODE_DATA                31:0 /* RWXVF */
#define NV_PTIMER_ALARM_0                                0x00009420 /* RW-4R */
#define NV_PTIMER_ALARM_0_NSEC                                 31:5 /* RWIUF */
#define NV_PTIMER_ALARM_0_NSEC_INIT                             0x0 /* RWI-V */
#define NV_PTIMER_TIMER_INTR_VECTOR                    0x00009440 /*       */
#define NV_PTIMER_TIMER_INTR_VECTOR_ID              7:0 /*       */
#define NV_PTIMER_TIMER_INTR_VECTOR_ID_VALUE  148 /*       */
#define NV_PTIMER_PRI_TMR_CG1                             0x00009600 /* RW-4R */
#define NV_PTIMER_PRI_TMR_CG1_MONITOR_CG_EN                      0:0 /* RWIVF */
#define NV_PTIMER_PRI_TMR_CG1_MONITOR_CG_EN_ENABLED       0x00000001 /* RW--V */
#define NV_PTIMER_PRI_TMR_CG1_MONITOR_CG_EN_DISABLED      0x00000000 /* RWI-V */
#define NV_PTIMER_PRI_TMR_CG1_MONITOR_CG_EN__PROD         0x00000000 /* RW--V */
#define NV_PTIMER_PRI_TMR_CG1_SLCG                                1:1 /* RWIVF */
#define NV_PTIMER_PRI_TMR_CG1_SLCG_ENABLED                0x00000000 /* RW--V */
#define NV_PTIMER_PRI_TMR_CG1_SLCG_DISABLED               0x00000001 /* RWI-V */
#define NV_PTIMER_PRI_TMR_CG1_SLCG__PROD                  0x00000000 /* RW--V */

--------------------------------------------------------------------------------
                         KEY LEGEND
--------------------------------------------------------------------------------

Each define in the .ref file has a 5 field code to say what kind of define it is: i.e. /* RW--R */
The following legend shows accepted values for each of the 5 fields:
  Read, Write, Internal State, Declaration/Size, and Define Indicator.

  Read
    ' ' = Other Information
    '-' = Field is part of a write-only register
    'C' = Value read is always the same, constant value line follows (C)
    'R' = Value is read


  Write
    ' ' = Other Information
    '-' = Must not be written (D), value ignored when written (R,A,F)
    'W' = Can be written


  Internal State
    ' ' = Other Information
    '-' = No internal state
    'X' = Internal state, initial value is unknown
    'I' = Internal state, initial value is known and follows (I), see "Reset Signal" section for signal.
    'E' = Internal state, initial value is known and follows (E), see "Reset Signal" section for signal.
    'B' = Internal state, initial value is known and follows (B), see "Reset Signal" section for signal.
    'C' = Internal state, initial value is known and follows (C), see "Reset Signal" section for signal.

    'V' = (legacy) Internal state, initialize at volatile reset
    'D' = (legacy) Internal state, default initial value at object creation (legacy: Only used in dev_ram.ref)
    'C' = (legacy) Internal state, initial value at object creation
    'C' = (legacy) Internal state, class-based initial value at object creation (legacy: Only used in dev_ram.ref)


  Declaration/Size
    ' ' = Other Information
    '-' = Does Not Apply
    'V' = Type is void
    'U' = Type is unsigned integer
    'S' = Type is signed integer
    'F' = Type is IEEE floating point
    '1' = Byte size (008)
    '2' = Short size (016)
    '3' = Three byte size (024)
    '4' = Word size (032)
    '8' = Double size (064)


  Define Indicator
    ' ' = Other Information
    'C' = Clear value
    'D' = Device
    'L' = Logical device.
    'M' = Memory
    'R' = Register
    'A' = Array of Registers
    'F' = Field
    'V' = Value
    'T' = Task
    'P' = Phantom Register

    'B' = (legacy) Bundle address
    'G' = (legacy) General purpose configuration register
    'C' = (legacy) Class

  Reset signal defaults for graphics engine registers.
    All graphics engine registers use the following defaults for reset signals:
     'E' = initialized with engine_reset_
     'I' = initialized with context_reset_
     'B' = initialized with reset_IB_dly_

  Reset signal
    For units that differ from the graphics engine defaults, the reset signals should be defined here:
